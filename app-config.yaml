app:
  title: Scaffolded Backstage App
  baseUrl: https://backstage.floretos.com

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: https://backstage.floretos.com
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: https://backstage.floretos.com
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: "pg"
    connection:
      host: "citus-master.datalayer.svc.cluster.local"
      port: "5432"
      user: "postgres"
      database: "backstage_plugin_catalog"
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # '/test':
  #   target: 'https://example.com'
  #   changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers: {}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: github-discovery
      target: https://github.com/bludot

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
  lighthouse:
    baseUrl: https://lighthouse.backstage.floretos.com

  integrations:
    github:
      - host: github.com
        token: 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

  proxy:
    '/circleci/api':
      target: https://circleci.com/api/v1.1
      headers:
        Circle-Token: ${CIRCLECI_AUTH_TOKEN}

    '/jenkins/api':
      target: http://localhost:8080
      headers:
        Authorization: ${JENKINS_BASIC_AUTH_HEADER}

    '/travisci/api':
      target: https://api.travis-ci.com
      changeOrigin: true
      headers:
        Authorization: ${TRAVISCI_AUTH_TOKEN}
        travis-api-version: '3'

    '/newrelic/apm/api':
      target: https://api.newrelic.com/v2
      headers:
        X-Api-Key: ${NEW_RELIC_REST_API_KEY}

    '/newrelic/api':
      target: https://api.newrelic.com
      headers:
        X-Api-Key: ${NEW_RELIC_USER_KEY}

    '/pagerduty':
      target: https://api.pagerduty.com
      headers:
        Authorization: Token token=${PAGERDUTY_TOKEN}

    '/buildkite/api':
      target: https://api.buildkite.com/v2/
      headers:
        Authorization: ${BUILDKITE_TOKEN}

    '/sentry/api':
      target: https://sentry.io/api/
      allowedMethods: ['GET']
      headers:
        Authorization: ${SENTRY_TOKEN}

    '/ilert':
      target: https://api.ilert.com
      allowedMethods: ['GET', 'POST', 'PUT']
      allowedHeaders: ['Authorization']
      headers:
        Authorization: ${ILERT_AUTH_HEADER}

    '/airflow':
      target: https://your.airflow.instance.com/api/v1
      headers:
        Authorization: ${AIRFLOW_BASIC_AUTH_HEADER}

    '/gocd':
      target: https://your.gocd.instance.com/go/api
      allowedMethods: ['GET']
      allowedHeaders: ['Authorization']
      headers:
        Authorization: Basic ${GOCD_AUTH_CREDENTIALS}

providers:
  google:
    development:
      clientId: ${AUTH_GOOGLE_CLIENT_ID}
      clientSecret: ${AUTH_GOOGLE_CLIENT_SECRET}
  github:
    development:
      clientId: ${AUTH_GITHUB_CLIENT_ID}
      clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
      enterpriseInstanceUrl: ${AUTH_GITHUB_ENTERPRISE_INSTANCE_URL}
  gitlab:
    development:
      clientId: ${AUTH_GITLAB_CLIENT_ID}
      clientSecret: ${AUTH_GITLAB_CLIENT_SECRET}
      audience: ${GITLAB_BASE_URL}
  saml:
    entryPoint: 'http://localhost:7001/'
    issuer: 'passport-saml'
    cert: 'fake-cert-base64'
  okta:
    development:
      clientId: ${AUTH_OKTA_CLIENT_ID}
      clientSecret: ${AUTH_OKTA_CLIENT_SECRET}
      audience: ${AUTH_OKTA_AUDIENCE}
  oauth2:
    development:
      clientId: ${AUTH_OAUTH2_CLIENT_ID}
      clientSecret: ${AUTH_OAUTH2_CLIENT_SECRET}
      authorizationUrl: ${AUTH_OAUTH2_AUTH_URL}
      tokenUrl: ${AUTH_OAUTH2_TOKEN_URL}
      ###
      # provide a list of scopes as needed for your OAuth2 Server:
      #
      # scope: saml-login-selector openid profile email
  oidc:
    # Note that you must define a session secret (see above) since the oidc provider requires session support.
    # Note that by default, this provider will use the 'none' prompt which assumes that your are already logged on in the IDP.
    # You should set prompt to:
    # - auto: will let the IDP decide if you need to log on or if you can skip login when you have an active SSO session
    # - login: will force the IDP to always present a login form to the user
    development:
      metadataUrl: ${AUTH_OIDC_METADATA_URL}
      clientId: ${AUTH_OIDC_CLIENT_ID}
      clientSecret: ${AUTH_OIDC_CLIENT_SECRET}
      authorizationUrl: ${AUTH_OIDC_AUTH_URL}
      tokenUrl: ${AUTH_OIDC_TOKEN_URL}
      tokenSignedResponseAlg: ${AUTH_OIDC_TOKEN_SIGNED_RESPONSE_ALG} # default='RS256'
      scope: ${AUTH_OIDC_SCOPE} # default='openid profile email'
      prompt: ${AUTH_OIDC_PROMPT} # default=none (allowed values: auto, none, consent, login)
  auth0:
    development:
      clientId: ${AUTH_AUTH0_CLIENT_ID}
      clientSecret: ${AUTH_AUTH0_CLIENT_SECRET}
      domain: ${AUTH_AUTH0_DOMAIN}
  microsoft:
    development:
      clientId: ${AUTH_MICROSOFT_CLIENT_ID}
      clientSecret: ${AUTH_MICROSOFT_CLIENT_SECRET}
      tenantId: ${AUTH_MICROSOFT_TENANT_ID}
  onelogin:
    development:
      clientId: ${AUTH_ONELOGIN_CLIENT_ID}
      clientSecret: ${AUTH_ONELOGIN_CLIENT_SECRET}
      issuer: ${AUTH_ONELOGIN_ISSUER}
  bitbucket:
    development:
      clientId: ${AUTH_BITBUCKET_CLIENT_ID}
      clientSecret: ${AUTH_BITBUCKET_CLIENT_SECRET}
  atlassian:
    development:
      clientId: ${AUTH_ATLASSIAN_CLIENT_ID}
      clientSecret: ${AUTH_ATLASSIAN_CLIENT_SECRET}
      scopes: ${AUTH_ATLASSIAN_SCOPES}
costInsights:
  engineerCost: 200000
  products:
    computeEngine:
      name: Compute Engine
      icon: compute
    cloudDataflow:
      name: Cloud Dataflow
      icon: data
    cloudStorage:
      name: Cloud Storage
      icon: storage
    bigQuery:
      name: BigQuery
      icon: search
    events:
      name: Events
      icon: data
  metrics:
    DAU:
      name: Daily Active Users
      default: true
    MSC:
      name: Monthly Subscribers
  currencies:
    engineers:
      label: 'Engineers üõ†'
      unit: 'engineer'
    usd:
      label: 'US Dollars üíµ'
      kind: 'USD'
      unit: 'dollar'
      prefix: '$'
      rate: 1
    carbonOffsetTons:
      label: 'Carbon Offset Tons ‚ôªÔ∏è‚öñÔ∏ès'
      kind: 'CARBON_OFFSET_TONS'
      unit: 'carbon offset ton'
      rate: 3.5
    beers:
      label: 'Beers üç∫'
      kind: 'BEERS'
      unit: 'beer'
      rate: 4.5
    pintsIceCream:
      label: 'Pints of Ice Cream üç¶'
      kind: 'PINTS_OF_ICE_CREAM'
      unit: 'ice cream pint'
      rate: 5.5
homepage:
  clocks:
    - label: UTC
      timezone: UTC
    - label: NYC
      timezone: 'America/New_York'
    - label: STO
      timezone: 'Europe/Stockholm'
    - label: TYO
      timezone: 'Asia/Tokyo'
pagerduty:
  eventsBaseUrl: 'https://events.pagerduty.com/v2'
jenkins:
  instances:
    - name: default
      baseUrl: https://jenkins.example.com
      username: backstage-bot
      apiKey: 123456789abcdef0123456789abcedf012

azureDevOps:
  host: dev.azure.com
  token: my-token
  organization: my-company

apacheAirflow:
  baseUrl: https://your.airflow.instance.com

gocd:
  baseUrl: https://your.gocd.instance.com

sentry:
  organization: my-company

rollbar:
  organization: my-company
  # NOTE: The rollbar-backend & accountToken key may be deprecated in the future (replaced by a proxy config)
  accountToken: my-rollbar-account-token

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters: []

kafka:
  clientId: backstage
  clusters:
    - name: cluster
      brokers:
        - localhost:9092

allure:
  baseUrl: http://localhost:5050/allure-docker-service

grafana:
  # Publicly accessible domain
  domain: https://grafana.floretos.com

  # Is unified alerting enabled in Grafana?
  # See: https://grafana.com/blog/2021/06/14/the-new-unified-alerting-system-for-grafana-everything-you-need-to-know/
  # Optional. Default: false
  unifiedAlerting: false